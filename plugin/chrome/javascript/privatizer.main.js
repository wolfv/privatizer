// Generated by CoffeeScript 1.3.1
(function() {
  var Crypt, DOM, Popup, Privatizer, Request, preg, purl, sendRequest, xhrContainer;

  purl = "http://privatizer.crabdance.com/";

  preg = new RegExp("(:enc:)([^:]+):([^:]+):", "g");

  Request = window.privatizer.request;

  xhrContainer = window.privatizer.xhrContainer;

  sendRequest = function(request) {
    request.requestID = xhrContainer.count;
    xhrContainer.callbacks[xhrContainer.count] = request.onload;
    Request(request);
    return xhrContainer.count++;
  };

  window.privatizer.crypt_before_send = function(textarea, padlock) {
    return Crypt.encrypt(textarea, padlock.getAttribute('key'));
  };

  Privatizer = {
    login: function(username, password, padlock) {
      if (padlock == null) {
        padlock = null;
      }
      return sendRequest({
        type: "POST",
        content: "username=" + username + "&password=" + password,
        url: purl + "api/login",
        onload: function(response) {
          if (padlock) {
            window.privatizer.popup.open(padlock);
          }
        }
      });
    },
    decryptDOM: function() {
      var classname, elements, messages, msg, _i, _j, _len, _len1, _ref, _results;
      messages = [];
      _ref = Plugin.classnames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        classname = _ref[_i];
        elements = document.getElementsByClassName(classname);
        if (elements.length) {
          elements = Array.prototype.slice.call(elements);
          messages = elements.concat(messages);
        }
      }
      _results = [];
      for (_j = 0, _len1 = messages.length; _j < _len1; _j++) {
        msg = messages[_j];
        _results.push((function() {
          return msg.textContent.replace(preg, function() {
            if (RegExp.$1) {
              return Crypt.decrypt(msg, RegExp.$3, RegExp.$2);
            }
          });
        })());
      }
      return _results;
    }
  };

  Crypt = {
    encrypt: function(elem, keyhash) {
      return sendRequest({
        type: "GET",
        url: purl + "api/key/" + keyhash,
        onload: function(response) {
          var crypttext, json;
          if (response.status === 200) {
            json = JSON.parse(response.text);
            crypttext = Aes.Ctr.encrypt(elem.uncryptedText, json.key, 256);
            elem.value = ":enc:" + keyhash + ":" + crypttext + ":";
            DOM.fireEvent(elem, 'change');
            DOM.fireEvent(elem, 'keyup');
            DOM.fireEvent(elem, 'keydown');
            return DOM.fireEvent(elem, 'keypress');
          } else {
            console.log(response);
            return console.log('cannot encrypt the shizzle.');
          }
        }
      });
    },
    decrypt: function(msg, value, keyhash) {
      return sendRequest({
        url: purl + "api/key/" + keyhash,
        onload: function(response) {
          var cryptobutton, decryptedText, json, oldHTML;
          if (response.status === 200) {
            try {
              json = JSON.parse(response.text);
              decryptedText = Aes.Ctr.decrypt(value, json.key, 256);
            } catch (error) {
              decryptedText = "Sorry, something is wrong with the key. " + error;
            }
          } else {
            decryptedText = "Sorry, you don't have permissions to decrypt this.";
          }
          oldHTML = msg.innerText;
          cryptobutton = document.createElement('span');
          cryptobutton.className = "cryptobutton";
          cryptobutton.oldHTML = oldHTML;
          cryptobutton.innerHTML = "[V]";
          msg.innerHTML = decryptedText + " ";
          msg.appendChild(cryptobutton);
          cryptobutton.onmouseover = function(e) {
            var reveal_text;
            reveal_text = document.createElement('div');
            reveal_text.className = "reveal_text privatizer-popup";
            reveal_text.style.position = "absolute";
            reveal_text.style.left = e.pageX + 'px';
            reveal_text.style.top = e.pageY + 'px';
            reveal_text.innerHTML = "<h3>Unencrypted Text</h3><p>" + this.oldHTML + "</p>";
            return document.body.appendChild(reveal_text);
          };
          cryptobutton.onmouseout = function(e) {
            var el, els, _i, _len, _results;
            els = document.body.getElementsByClassName('reveal_text');
            _results = [];
            for (_i = 0, _len = els.length; _i < _len; _i++) {
              el = els[_i];
              _results.push(document.body.removeChild(el));
            }
            return _results;
          };
          return decryptedText;
        }
      });
    }
  };

  DOM = {
    totalOffset: function(element) {
      var x, y;
      x = y = 0;
      while (element.offsetParent) {
        x += element.offsetLeft;
        y += element.offsetTop;
        element = element.offsetParent;
      }
      return {
        x: x,
        y: y
      };
    },
    fireEvent: function(element, event) {
      var evt;
      evt = document.createEvent("HTMLEvents");
      evt.initEvent(event, true, false);
      return element.dispatchEvent(evt);
    },
    fadeIn: function(element, speed) {
      var interval, opacity;
      if (speed == null) {
        speed = 100;
      }
      opacity = element.style.opacity;
      return interval = setInterval(function() {
        opacity += 0.1;
        element.style.opacity = opacity;
        if (opacity > 1) {
          clearInterval(intveral);
          opacity = 1;
          return element.style.opacity = opacity;
        }
      }, speed);
    },
    fadeOut: function(element, speed) {
      var interval, opacity;
      if (speed == null) {
        speed = 100;
      }
      opacity = element.style.opacity;
      return interval = setInterval(function() {
        opacity -= 0.1;
        element.style.opacity = opacity;
        if (opacity < 0) {
          clearInterval(intveral);
          opacity = 0;
          return element.style.opacity = opacity;
        }
      }, speed);
    },
    findTextareas: function() {
      var textarea, textareas, _i, _len, _results;
      textareas = document.getElementsByTagName("textarea");
      _results = [];
      for (_i = 0, _len = textareas.length; _i < _len; _i++) {
        textarea = textareas[_i];
        _results.push((function() {
          var padlock;
          if (textarea.padlock !== void 0 || textarea.style.display === 'none' || textarea.style.visibility === 'hidden' || textarea.style.opacity === 0 || textarea.offsetLeft < -1000 || textarea.offsetLeft > 1000 || textarea.offsetTop < -1000) {
            return false;
          }
          textarea.setAttribute('encryption', '0');
          textarea.setAttribute('unencrypted', textarea.value);
          textarea.encrypted = false;
          textarea.uncryptedText = "";
          padlock = document.createElement('span');
          padlock.className = "privatizer-padlock";
          padlock.innerHTML = "A";
          padlock.setAttribute('open', 0);
          padlock.setAttribute('key', 0);
          padlock.setAttribute('tabindex', 0);
          Plugin.findPosition(textarea, padlock);
          textarea.padlock = padlock;
          padlock.textarea = textarea;
          padlock.addEventListener('click', function(e) {
            window.privatizer.popup.open(padlock);
            return e.stopPropagation();
          }, true);
          padlock.addEventListener('focus', function(e) {
            window.privatizer.popup.open(padlock);
            return e.stopPropagation();
          }, true);
          textarea.onblur = function() {
            if (padlock.textarea.encrypted !== true && padlock.textarea.value !== padlock.textarea.placeholder) {
              padlock.textarea.encrypted = true;
              padlock.textarea.uncryptedText = this.value;
              if (padlock.textarea.uncryptedText && padlock.getAttribute('key')) {
                return Crypt.encrypt(padlock.textarea, padlock.getAttribute('key'));
              }
            }
          };
          textarea.onfocus = function() {
            if (this.encrypted && this.value !== '' && this.value !== this.placeholder) {
              this.value = this.uncryptedText;
              return this.encrypted = false;
            }
          };
          return textarea.onsubmit = function(e) {
            this.value = "Aha.";
            e.stopPropagation();
            return e.preventDefault();
          };
        })());
      }
      return _results;
    }
  };

  Popup = (function() {

    Popup.name = 'Popup';

    function Popup() {
      var elem;
      elem = document.createElement('div');
      elem.id = 'privatizer-popup';
      elem.className = 'privatizer-popup visible';
      elem.style.position = 'absolute';
      elem.style.display = 'none';
      this.Element = elem;
      document.body.appendChild(this.Element);
    }

    Popup.prototype.Element = null;

    Popup.prototype.Padlock = null;

    Popup.prototype.isOpen = false;

    Popup.prototype.close = function(e) {
      var checktarget, elem;
      if (!e) {
        if (this.isOpen) {
          this.Padlock.setAttribute('open', '0');
          try {
            this.Element.className = 'privatizer-popup hidden';
            this.Element.style.display = 'none';
            this.isOpen = false;
            window.onkeydown = function() {};
          } catch (_error) {}
        }
        return;
      }
      elem = this.Element;
      checktarget = function(target) {
        while (target.parentNode) {
          if (target === elem) {
            return false;
          } else {
            target = target.parentNode;
          }
        }
        return true;
      };
      if (this.isOpen && checktarget(e.target)) {
        this.Padlock.setAttribute('open', '0');
        try {
          this.Element.className = 'privatizer-popup hidden';
          this.Element.style.display = 'none';
          this.isOpen = false;
          window.onkeydown = function() {};
        } catch (_error) {}
      }
    };

    Popup.prototype.open = function(padlock) {
      var elem, offset, request;
      if (this.isOpen && this.Padlock === padlock) {
        return;
      }
      this.Padlock = padlock;
      offset = DOM.totalOffset(this.Padlock);
      elem = this.Element;
      elem.style.left = offset['x'] + "px";
      elem.style.top = offset['y'] + 30 + "px";
      window.onkeydown = function(e) {
        var next, prevSelect, select, selects, _i, _j, _len, _len1, _results;
        if (e.keyCode === 40) {
          e.preventDefault();
          selects = elem.getElementsByTagName('input');
          for (_i = 0, _len = selects.length; _i < _len; _i++) {
            select = selects[_i];
            if (next) {
              select.checked = true;
              select.onchange();
              break;
            }
            if (select.checked) {
              next = true;
            }
          }
          if (!next) {
            return selects[0].checked = true;
          }
        } else if (e.keyCode === 38) {
          e.preventDefault();
          selects = elem.getElementsByTagName('input');
          _results = [];
          for (_j = 0, _len1 = selects.length; _j < _len1; _j++) {
            select = selects[_j];
            if (select.checked) {
              if (prevSelect) {
                prevSelect.checked = true;
                prevSelect.onchange();
                break;
              } else {
                select.checked = true;
              }
            }
            _results.push(prevSelect = select);
          }
          return _results;
        } else if (e.keyCode === 27) {
          window.privatizer.popup.close(null);
          return e.preventDefault();
        }
      };
      elem.style.display = 'block';
      elem.innerHTML = '';
      request = sendRequest({
        type: "GET",
        url: purl + "api/keys/list",
        onload: function(response) {
          var info, json, key, loginform, reference, ul, _fn, _i, _len;
          switch (response.status) {
            case 200:
              json = JSON.parse(response.text);
              elem.innerHTML = '<h3>Keys</h3>';
              ul = elem.appendChild(document.createElement('ul'));
              _fn = function() {
                var hidden_user_badge, label, li, radio, user, user_badge, _j, _k, _len1, _len2, _ref, _ref1;
                radio = document.createElement('input');
                radio.setAttribute('type', 'radio');
                radio.id = 'pkey-' + key.hash;
                radio.value = key.hash;
                radio.setAttribute('name', 'keys');
                label = document.createElement('label');
                label.innerHTML = "<span class=\"labelrow\"><span class=\"name\" title=\"" + key.description + "\">" + key.name + "</span> <span class=\"description\" title=\"" + key.description + "\">" + key.description + "</span></span>";
                label.setAttribute('for', 'pkey-' + key.hash);
                label.setAttribute('tabindex', 0);
                user_badge = hidden_user_badge = "";
                _ref = key.shared_with.slice(0, 6);
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  user = _ref[_j];
                  user_badge += "<a class=\"user_badge\">" + user.name + "</a> ";
                }
                if (key.shared_with.length === 0) {
                  user_badge = "private key";
                }
                label.innerHTML += "<span class=\"labelrow\">" + user_badge + "</span>";
                _ref1 = key.shared_with.slice(5);
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  user = _ref1[_k];
                  hidden_user_badge += "<a class=\"user_badge\">" + user.name + "</a> ";
                }
                label.user_badge = user_badge;
                label.hidden_user_badge = hidden_user_badge;
                li = ul.appendChild(document.createElement('li'));
                li.appendChild(radio);
                li.appendChild(label);
                return radio.onchange = function() {
                  padlock.setAttribute('key', this.value);
                  if (padlock.textarea.encrypted === true) {
                    return Crypt.encrypt(padlock.textarea, this.value);
                  } else {
                    return DOM.fireEvent(padlock.textarea, 'blur');
                  }
                };
              };
              for (_i = 0, _len = json.length; _i < _len; _i++) {
                key = json[_i];
                _fn();
              }
              info = document.createElement('p');
              info.className = "privatizer_footer";
              info.innerHTML = "You can modify your keys at <a href=\"" + purl + "\" target=\"_blank\">privatizer</a>";
              elem.appendChild(info);
              break;
            default:
              loginform = document.createElement('form');
              reference = this;
              loginform.onsubmit = function(e) {
                e.preventDefault();
                e.stopPropagation();
                response = Privatizer.login(loginform.elements['email'].value, loginform.elements['password'].value, padlock);
                return window.privatizer.popup.close();
              };
              loginform.innerHTML = '\
								<input id="privatizer_email" type="email" name="email" placeholder="Email" tabindex="0"></input>\
								<input type="password" name="password" placeholder="Password" tabindex="0"></input>\
								<input type="submit" value="Login" tabindex="0"/>\
							';
              loginform.elements[0].focus();
              elem.innerHTML = '<h3>Login</h3>';
              return elem.appendChild(loginform);
          }
        }
      });
      document.addEventListener('click', function(e) {
        console.log(e);
        window.privatizer.popup.close(e);
        return true;
      }, false);
      this.isOpen = true;
      return this.Padlock.setAttribute('open', '1');
    };

    return Popup;

  })();

  document.addEventListener("DOMContentLoaded", function() {
    window.privatizer = {};
    window.privatizer.popup = new Popup();
    console.log('wir sind da. logs gehen?');
    if (Plugin.classnames !== void 0) {
      return setInterval(function() {
        Privatizer.decryptDOM();
        return DOM.findTextareas();
      }, 1000);
    }
  });

}).call(this);

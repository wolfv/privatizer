// Generated by CoffeeScript 1.3.1
(function() {
  var Crypt, DOM, Privatizer, popup, preg, purl;

  purl = "http://wolle.crabdance.com:6543/";

  preg = new RegExp("(:enc:)([^:]+):([^:]+):", "g");

  Privatizer = {
    login: function(username, password) {
      var request, sendData;
      request = new XMLHttpRequest();
      request.open("POST", purl + "api/login", false);
      request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      sendData = "username=" + username + "&password=" + password;
      request.send(sendData);
      if (request.readyState === 4 && request.status === 200) {
        return request.response;
      }
    },
    decryptDOM: function() {
      var classname, elements, messages, msg, _i, _j, _len, _len1, _ref, _results;
      messages = [];
      _ref = Plugin.classnames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        classname = _ref[_i];
        elements = document.getElementsByClassName(classname);
        if (elements.length) {
          elements = Array.prototype.slice.call(elements);
          messages = elements.concat(messages);
        }
      }
      _results = [];
      for (_j = 0, _len1 = messages.length; _j < _len1; _j++) {
        msg = messages[_j];
        _results.push((function() {
          var dc, decryptedText, oldHTML;
          dc = false;
          decryptedText = msg.textContent.replace(preg, function() {
            console.log(RegExp.$3 + " ... " + RegExp.$2);
            if (RegExp.$1) {
              dc = true;
            }
            return Crypt.decrypt(RegExp.$3, RegExp.$2, 256);
          });
          if (dc) {
            oldHTML = msg.innerHTML;
            msg.oldHTML = oldHTML;
            msg.innerHTML = decryptedText + " [âš·]";
            msg.onmouseover = function(e) {
              return msg.innerHTML = msg.oldHTML;
            };
          }
        })());
      }
      return _results;
    }
  };

  Crypt = {
    encrypt: function(value, keyhash) {
      var crypttext, json, request;
      request = new XMLHttpRequest();
      request.open("GET", purl + "api/key/" + keyhash, false);
      request.send(null);
      if (request.readyState === 4 && request.status === 200) {
        json = JSON.parse(request.response);
        crypttext = Aes.Ctr.encrypt(value, json.key, 256);
        return keyhash + ":" + crypttext + ":";
      } else if (request.readyState === 4) {
        console.log(request);
        alert('cannot encrypt the shizzle.');
        return false;
      }
    },
    decrypt: function(value, keyhash) {
      var decryptedText, json, request;
      request = new XMLHttpRequest();
      request.open("GET", purl + "api/key/" + keyhash, false);
      request.send(null);
      if (request.readyState === 4 && request.status === 200) {
        try {
          json = JSON.parse(request.response);
          decryptedText = Aes.Ctr.decrypt(value, json.key, 256);
        } catch (error) {
          decryptedText = "Sorry, something is wrong with the key. " + error;
        }
      } else if (request.readyState === 4) {
        decryptedText = "Sorry, you don't have permissions to decrypt this.";
      }
      return decryptedText;
    }
  };

  DOM = {
    totalOffset: function(element) {
      var x, y;
      x = y = 0;
      while (element.offsetParent) {
        x += element.offsetLeft;
        y += element.offsetTop;
        element = element.offsetParent;
      }
      return {
        x: x,
        y: y
      };
    },
    fadeIn: function(element, speed) {
      var interval, opacity;
      if (speed == null) {
        speed = 100;
      }
      opacity = element.style.opacity;
      return interval = setInterval(function() {
        opacity += 0.1;
        element.style.opacity = opacity;
        if (opacity > 1) {
          clearInterval(intveral);
          opacity = 1;
          return element.style.opacity = opacity;
        }
      }, speed);
    },
    fadeOut: function(element, speed) {
      var interval, opacity;
      if (speed == null) {
        speed = 100;
      }
      opacity = element.style.opacity;
      return interval = setInterval(function() {
        opacity -= 0.1;
        element.style.opacity = opacity;
        if (opacity < 0) {
          clearInterval(intveral);
          opacity = 0;
          return element.style.opacity = opacity;
        }
      }, speed);
    },
    findTextareas: function() {
      var textarea, textareas, _i, _len, _results;
      textareas = document.getElementsByTagName("textarea");
      _results = [];
      for (_i = 0, _len = textareas.length; _i < _len; _i++) {
        textarea = textareas[_i];
        _results.push((function() {
          var padlock;
          if (textarea.hasAttribute('encryption') || textarea.style.display === 'none' || textarea.style.visibility === 'hidden' || textarea.style.opacity === 0) {
            return false;
          }
          textarea.setAttribute('encryption', '0');
          textarea.setAttribute('unencrypted', textarea.value);
          padlock = document.createElement('span');
          padlock.className = "privatizer-padlock";
          padlock.innerHTML = "A";
          padlock.setAttribute('open', 0);
          textarea.parentNode.insertBefore(padlock, textarea.nextSibling);
          padlock.onclick = function(e) {
            console.log('padlock is clcikeded');
            if (padlock.getAttribute('open') === '0') {
              popup(padlock);
            }
            return e.stopPropagation();
          };
          textarea.onblur = function() {
            if (this.getAttribute('encryption') !== '1') {
              this.setAttribute('unencrypted', this.value);
              this.setAttribute('encryption', '1');
              if (this.value) {
                return this.value = ":enc:" + Crypt.encrypt(this.value, padlock.getAttribute('key'));
              }
            }
          };
          return textarea.onfocus = function() {
            if (this.getAttribute('encryption') === '1') {
              this.setAttribute('encryption', '0');
              return this.value = this.getAttribute('unencrypted');
            }
          };
        })());
      }
      return _results;
    }
  };

  popup = function(padlock) {
    var elem, offset, request;
    elem = document.createElement('div');
    elem.id = 'privatizer-popup';
    elem.className = 'privatizer-popup';
    elem.style.position = 'absolute';
    elem.style.border = '1px solid #000';
    offset = DOM.totalOffset(padlock);
    elem.style.left = offset['x'] + "px";
    elem.style.top = offset['y'] + 30 + "px";
    elem.style.zIndex = 10000;
    elem.onclick = function(e) {
      return e.stopPropagation();
    };
    document.body.appendChild(elem);
    request = new XMLHttpRequest();
    document.documentElement.onclick = function() {
      padlock.setAttribute('open', '0');
      try {
        elem = document.getElementById("privatizer-popup");
        return document.body.removeChild(elem);
      } catch (_error) {}
    };
    request.onreadystatechange = function() {
      var json, key, loginform, ul, _fn, _i, _len;
      if (request.readyState === 4) {
        switch (request.status) {
          case 200:
            json = JSON.parse(request.response);
            ul = elem.appendChild(document.createElement('ul'));
            _fn = function() {
              var label, li, radio;
              radio = document.createElement('input');
              radio.setAttribute('type', 'radio');
              radio.id = 'pkey-' + key.hash;
              radio.value = key.hash;
              radio.setAttribute('name', 'keys');
              label = document.createElement('label');
              label.innerHTML = "<span class=\"description\">" + key.description + "</span>";
              label.setAttribute('for', 'pkey-' + key.hash);
              li = ul.appendChild(document.createElement('li'));
              li.appendChild(radio);
              li.appendChild(label);
              return radio.onchange = function() {
                return padlock.setAttribute('key', this.value);
              };
            };
            for (_i = 0, _len = json.length; _i < _len; _i++) {
              key = json[_i];
              _fn();
            }
            break;
          case 403:
            loginform = document.createElement('form');
            loginform.onsubmit = function(e) {
              var response;
              e.preventDefault();
              response = Privatizer.login(loginform.elements['email'].value, loginform.elements['password'].value);
              console.log(response);
              return popup(padlock);
            };
            loginform.innerHTML = '\
									<input type="email" name="email" placeholder="Email"></input>\
									<input type="password" name="password" placeholder="Password"></input>\
									<input type="submit" value="Login"/>';
            elem.innerHTML = '<h3>Login Dring</h3>';
            return elem.appendChild(loginform);
        }
      }
    };
    request.open("GET", purl + "api/keys/list", true);
    request.send(null);
    return padlock.setAttribute('open', '1');
  };

  document.addEventListener("DOMContentLoaded", function() {
    if (Plugin.classnames !== void 0) {
      return setInterval(function() {
        Privatizer.decryptDOM();
        return DOM.findTextareas();
      }, 1000);
    }
  });

}).call(this);

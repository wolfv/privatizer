// Generated by CoffeeScript 1.3.1
(function() {
  var Crypt, DOM, Popup, Privatizer, Request, preg, purl, sendRequest, xhrContainer;

  purl = "http://wolle.crabdance.com:6543/";

  preg = new RegExp("(:enc:)([^:]+):([^:]+):", "g");

  Request = window.privatizer.request;

  xhrContainer = window.privatizer.xhrContainer;

  sendRequest = function(request) {
    request.requestID = xhrContainer.count;
    xhrContainer.callbacks[xhrContainer.count] = request.onload;
    Request(request);
    return xhrContainer.count++;
  };

  Privatizer = {
    login: function(username, password) {
      return sendRequest({
        type: "POST",
        data: "username=" + username + "&password=" + password,
        url: purl + "api/login",
        onload: function(response) {
          return response;
        }
      });
    },
    decryptDOM: function() {
      var classname, elements, messages, msg, _i, _j, _len, _len1, _ref, _results;
      messages = [];
      _ref = Plugin.classnames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        classname = _ref[_i];
        elements = document.getElementsByClassName(classname);
        if (elements.length) {
          elements = Array.prototype.slice.call(elements);
          messages = elements.concat(messages);
        }
      }
      _results = [];
      for (_j = 0, _len1 = messages.length; _j < _len1; _j++) {
        msg = messages[_j];
        _results.push((function() {
          return msg.textContent.replace(preg, function() {
            if (RegExp.$1) {
              return Crypt.decrypt(msg, RegExp.$3, RegExp.$2);
            }
          });
        })());
      }
      return _results;
    }
  };

  Crypt = {
    encrypt: function(elem, keyhash) {
      return sendRequest({
        type: "GET",
        url: purl + "api/key/" + keyhash,
        onload: function(response) {
          var crypttext, json;
          if (response.status === 200) {
            json = JSON.parse(response.text);
            crypttext = Aes.Ctr.encrypt(elem.value, json.key, 256);
            return elem.value = ":enc:" + keyhash + ":" + crypttext + ":";
          } else {
            console.log(response);
            return console.log('cannot encrypt the shizzle.');
          }
        }
      });
    },
    decrypt: function(msg, value, keyhash) {
      return sendRequest({
        url: purl + "api/key/" + keyhash,
        onload: function(response) {
          var decryptedText, json, oldHTML;
          if (response.status === 200) {
            try {
              json = JSON.parse(response.text);
              decryptedText = Aes.Ctr.decrypt(value, json.key, 256);
            } catch (error) {
              decryptedText = "Sorry, something is wrong with the key. " + error;
            }
          } else {
            decryptedText = "Sorry, you don't have permissions to decrypt this.";
          }
          oldHTML = msg.innerHTML;
          msg.oldHTML = oldHTML;
          msg.innerHTML = decryptedText + " [âš·]";
          msg.onmouseover = function(e) {
            return msg.innerHTML = msg.oldHTML;
          };
          return decryptedText;
        }
      });
    }
  };

  DOM = {
    totalOffset: function(element) {
      var x, y;
      x = y = 0;
      while (element.offsetParent) {
        x += element.offsetLeft;
        y += element.offsetTop;
        element = element.offsetParent;
      }
      return {
        x: x,
        y: y
      };
    },
    fadeIn: function(element, speed) {
      var interval, opacity;
      if (speed == null) {
        speed = 100;
      }
      opacity = element.style.opacity;
      return interval = setInterval(function() {
        opacity += 0.1;
        element.style.opacity = opacity;
        if (opacity > 1) {
          clearInterval(intveral);
          opacity = 1;
          return element.style.opacity = opacity;
        }
      }, speed);
    },
    fadeOut: function(element, speed) {
      var interval, opacity;
      if (speed == null) {
        speed = 100;
      }
      opacity = element.style.opacity;
      return interval = setInterval(function() {
        opacity -= 0.1;
        element.style.opacity = opacity;
        if (opacity < 0) {
          clearInterval(intveral);
          opacity = 0;
          return element.style.opacity = opacity;
        }
      }, speed);
    },
    findTextareas: function() {
      var textarea, textareas, _i, _len, _results;
	  // neu:
      textareas = Plugin.text_areas;
	  padLocations = Plugin.padlock_positions;
      _results = [];
      for (_i = 0, _len = textareas.length; _i < _len; _i++) {
        textarea = textareas[_i];
		// neu:
		position = padLocations[_i];
        _results.push((function() {
          var padlock;
          if (textarea.hasAttribute('encryption') || textarea.style.display === 'none' || textarea.style.visibility === 'hidden' || textarea.style.opacity === 0) {
            return false;
          }
          textarea.setAttribute('encryption', '0');
          textarea.setAttribute('unencrypted', textarea.value);
          padlock = document.createElement('span');
          padlock.className = "privatizer-padlock";
          padlock.innerHTML = "A";
          padlock.setAttribute('open', 0);
          padlock.setAttribute('key', 0);
		  // Code zur Positionierung:
		  padlock.setAttribute('style', "float:left; position:relative")
		  position.appendChild(padlock);
		  
          //textarea.parentNode.insertBefore(padlock, textarea.nextSibling);
          padlock.addEventListener('click', function(e) {
            window.privatizer.popup.open(padlock);
            return e.stopPropagation();
          }, true);
          textarea.onblur = function() {
            if (this.getAttribute('encryption') !== '1') {
              this.setAttribute('unencrypted', this.value);
              this.setAttribute('encryption', '1');
              if (this.value && padlock.getAttribute('key')) {
                return Crypt.encrypt(this, padlock.getAttribute('key'));
              }
            }
          };
          return textarea.onfocus = function() {
            if (this.getAttribute('encryption') === '1') {
              this.setAttribute('encryption', '0');
              return this.value = this.getAttribute('unencrypted');
            }
          };
        })());
      }
      return _results;
    }
  };

  Popup = (function() {

    Popup.name = 'Popup';

    function Popup() {
      var elem;
      elem = document.createElement('div');
      elem.id = 'privatizer-popup';
      elem.className = 'privatizer-popup visible';
      elem.style.position = 'absolute';
      elem.style.border = '1px solid #000';
      elem.style.zIndex = 10000;
      this.Element = elem;
      document.body.appendChild(this.Element);
    }

    Popup.prototype.Element = null;

    Popup.prototype.Padlock = null;

    Popup.prototype.isOpen = false;

    Popup.prototype.close = function(e) {
      var checktarget, elem;
      elem = this.Element;
      checktarget = function(target) {
        while (target.parentNode) {
          if (target === elem) {
            return false;
          } else {
            target = target.parentNode;
          }
        }
        return true;
      };
      if (this.isOpen && checktarget(e.target)) {
        this.Padlock.setAttribute('open', '0');
        try {
          this.Element.className = 'privatizer-popup hidden';
          this.Element.style.display = 'none';
          this.isOpen = false;
        } catch (_error) {}
      }
    };

    Popup.prototype.open = function(padlock) {
      var elem, offset, request;
      if (this.isOpen && this.Padlock === padlock) {
        return;
      }
      this.Padlock = padlock;
      offset = DOM.totalOffset(this.Padlock);
      elem = this.Element;
      elem.style.left = offset['x'] + "px";
      elem.style.top = offset['y'] + 30 + "px";
      elem.style.display = 'block';
      elem.innerHTML = '';
      request = sendRequest({
        type: "GET",
        url: purl + "api/keys/list",
        onload: function(response) {
          var json, key, loginform, ul, _fn, _i, _len;
          switch (response.status) {
            case 200:
              json = JSON.parse(response.text);
              ul = elem.appendChild(document.createElement('ul'));
              _fn = function() {
                var label, li, radio;
                radio = document.createElement('input');
                radio.setAttribute('type', 'radio');
                radio.id = 'pkey-' + key.hash;
                radio.value = key.hash;
                radio.setAttribute('name', 'keys');
                label = document.createElement('label');
                label.innerHTML = "<span class=\"name\">" + key.name + "</span><span class=\"description\">" + key.description + "</span>";
                label.setAttribute('for', 'pkey-' + key.hash);
                li = ul.appendChild(document.createElement('li'));
                li.appendChild(radio);
                li.appendChild(label);
                return radio.onchange = function() {
                  return padlock.setAttribute('key', this.value);
                };
              };
              for (_i = 0, _len = json.length; _i < _len; _i++) {
                key = json[_i];
                _fn();
              }
              break;
            case 403:
              loginform = document.createElement('form');
              loginform.onsubmit = function(e) {
                e.preventDefault();
                response = Privatizer.login(loginform.elements['email'].value, loginform.elements['password'].value);
                console.log(response);
                return popup(padlock);
              };
              loginform.innerHTML = '\
										<input type="email" name="email" placeholder="Email"></input>\
										<input type="password" name="password" placeholder="Password"></input>\
										<input type="submit" value="Login"/>';
              elem.innerHTML = '<h3>Login Dring</h3>';
              return elem.appendChild(loginform);
            default:
              return console.log('das war wohl nix? obwohl 403, eiegntlich');
          }
        }
      });
      document.addEventListener('click', function(e) {
        window.privatizer.popup.close(e);
        return true;
      }, false);
      this.isOpen = true;
      return this.Padlock.setAttribute('open', '1');
    };

    return Popup;

  })();

  document.addEventListener("DOMContentLoaded", function() {
    window.privatizer = {};
    window.privatizer.popup = new Popup();
    console.log('wir sind da. logs gehen?');
    if (Plugin.classnames !== void 0) {
      return setInterval(function() {
        Privatizer.decryptDOM();
        return DOM.findTextareas();
      }, 1000);
    }
  });

}).call(this);

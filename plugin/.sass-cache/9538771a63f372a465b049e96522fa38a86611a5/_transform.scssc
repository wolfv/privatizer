3.1.14 (Brainy Betty)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@options{ :@children[io:Sass::Tree::ImportNode
;0;@;[ :@imported_filename"shared:
@lineio:Sass::Tree::CommentNode:@silenti ;@;[ :@value["/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */;i:
@loud0o;;i ;@;[ ;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;i;0o;;i ;@;[ ;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;i;0o;;i ;@;[ ;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;i ;0o;;i ;@;[ ;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;i4;0o;;i ;@;[ ;["./* The default x-origin for transforms */;i7;0o:Sass::Tree::VariableNode:@guarded"!default:
@name"default-origin-x;@;[ :
@expro:Sass::Script::Number:@denominator_units[ ;@:@numerator_units["%;i7;i8:@original"50%;i8o;;i ;@;[ ;["./* The default y-origin for transforms */;i9;0o;;"!default;"default-origin-y;@;[ ;o;;[ ;@;["%;i7;i:;"50%;i:o;;i ;@;[ ;["./* The default z-origin for transforms */;i;;0o;;"!default;"default-origin-z;@;[ ;o;;[ ;@;["%;i7;i<;"50%;i<o;;i ;@;[ ;["//* The default x-multiplier for scaling */;i?;0o;;"!default;"default-scale-x;@;[ ;o;;[ ;@;[ ;f	1.25;i@;"	1.25;i@o;;i ;@;[ ;["//* The default y-multiplier for scaling */;iA;0o;;"!default;"default-scale-y;@;[ ;o:Sass::Script::Variable	;"default-scale-x;@:@underscored_name"default_scale_x;iB;iBo;;i ;@;[ ;["//* The default z-multiplier for scaling */;iC;0o;;"!default;"default-scale-z;@;[ ;o;	;"default-scale-x;@;"default_scale_x;iD;iDo;;i ;@;[ ;["*/* The default angle for rotations */;iG;0o;;"!default;"default-rotate;@;[ ;o;;[ ;@;["deg;i2;iH;"
45deg;iHo;;i ;@;[ ;["</* The default x-vector for the axis of 3d rotations */;iK;0o;;"!default;"default-vector-x;@;[ ;o;;@P;@;[ ;i;iL;"1;iLo;;i ;@;[ ;["</* The default y-vector for the axis of 3d rotations */;iM;0o;;"!default;"default-vector-y;@;[ ;o;;@P;@;[ ;i;iN;"1;iNo;;i ;@;[ ;["</* The default z-vector for the axis of 3d rotations */;iO;0o;;"!default;"default-vector-z;@;[ ;o;;@P;@;[ ;i;iP;"1;iPo;;i ;@;[ ;["0/* The default x-length for translations */;iS;0o;;"!default;"default-translate-x;@;[ ;o;;[ ;@;["em;i;iT;"1em;iTo;;i ;@;[ ;["0/* The default y-length for translations */;iU;0o;;"!default;"default-translate-y;@;[ ;o;	;"default-translate-x;@;"default_translate_x;iV;iVo;;i ;@;[ ;["0/* The default z-length for translations */;iW;0o;;"!default;"default-translate-z;@;[ ;o;	;"default-translate-x;@;"default_translate_x;iX;iXo;;i ;@;[ ;["*/* The default x-angle for skewing */;i[;0o;;"!default;"default-skew-x;@;[ ;o;;[ ;@;["deg;i
;i\;"	5deg;i\o;;i ;@;[ ;["*/* The default y-angle for skewing */;i];0o;;"!default;"default-skew-y;@;[ ;o;;[ ;@;["deg;i
;i^;"	5deg;i^o;;i ;@;[ ;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;ia;0o:Sass::Tree::MixinDefNode;"apply-origin;@;[o;;0;"only3d;@;[ ;o:Sass::Script::Operation
;@:@operand2o;
;@;o;;@P;@;[ ;i;im;"2;im:@operand1o:Sass::Script::Funcall
;"-compass-list-size;@;im:@keywords{ :
@args[o;
;"-compass-list;@;im;{ ; [o;	;"origin;@;"origin;im:@operator:gt;im;o;	;"only3d;@;"only3d;im;!:or;imu:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@name"only3d:@options{ :@underscored_name"only3d:
@lineinu:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@name"experimental:@options{ :@children[ :
@lineiu:@keywords{ :
@args[o:Sass::Script::String	;@	:@value"transform-origin;	is:
@type:identifiero:Sass::Script::Variable	;"origin;@	:@underscored_name"origin;	iso;	;@	;"	-moz;	it;;o;	;@	;"-webkit;	it;;o;	;@	;"-o;	it;;o;	;@	;"-ms;	it;;o:!Sass::Script::UnaryOperation	;@	;	it:@operator:not:@operando;	;@	;"-khtml;	it;;o;	;@	;"official;	it;;[o:Sass::Tree::MixinNode;"experimental;@:@children[ ;	iq:@keywords{ :
@args[o:Sass::Script::String	;@:@value"transform-origin;	io:
@type:identifiero; 	;"origin;@;"origin;	ioo:!Sass::Script::UnaryOperation	;@;	ip:@operator:not:@operando;	;@;"	-moz;	ip;;o;	;@;"-webkit;	ip;;o;	;@;	ip;;;o;	;@;"-o;	ip;;o;	;@;	ip;;;o;	;@;"-ms;	ip;;o;	;@;	ip;;;o;	;@;"-khtml;	ip;;o;	;@;"official;	ip;;;il:@has_childrenT; [[o;;"origin;@;"origin0[o;;"only3d;@;"only3d0o;;i ;@;[ ;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;iy;0o;;"transform-origin;@;[o;;0;"origin;@;[ ;o;
;"unquote;@;i;{ ; [o:Sass::Script::String	;@;" ;i:
@type:string;iu;$[o:Sass::Script::Operation
:@options{ :@operand2o:Sass::Script::Variable	:
@name"origin-z;@:@underscored_name"origin_z:
@linei;i:@operand1o; 
;@;o;	;	"origin-y;@;
"origin_y;i;i;o;	;	"origin-x;@;
"origin_x;i:@operator:or;;0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@name"origin-x:@options{ :@underscored_name"origin_x:
@lineiu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:@guarded0:
@name"origin:@options{ :@children[ :
@expro:Sass::Script::Number:@denominator_units[ ;@	:@numerator_units["%:@valuei7:
@linei:@original"50%;i[o:Sass::Tree::VariableNode:@guarded0;"origin;@:@children[ :
@expro; 	;"origin-x;@;"origin_x;	i;	iu;Þ[o:Sass::Script::Variable	:
@name"origin-y:@options{ :@underscored_name"origin_y:
@lineiu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@name"origin-z:@options{ :@underscored_name"origin_z:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"origin;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"origin;@;"origin;	io:Sass::Script::Number:@denominator_units[ ;@:@numerator_units["%;i7;	i:@original"50%;	i;	i[o:Sass::Tree::VariableNode:@guarded0;"origin;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"origin;@;"origin;	io; 	;"origin-y;@;"origin_y;	i;	i;	iu;5[o:Sass::Script::Variable	:
@name"origin-z:@options{ :@underscored_name"origin_z:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"origin;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"origin;@;"origin;	io; 	;"origin-z;@;"origin_z;	i;	i;	io:Sass::Tree::MixinNode;	"apply-origin;@:@children[ ;i:@keywords{ :
@args[o;	;	"origin;@;
"origin;io;	;	"only3d;@;
"only3d;i;i;%T; [	[o;;"origin-x;@;"origin_xo;	;"default-origin-x;@;"default_origin_x;i|[o;;"origin-y;@;"origin_yo;	;"default-origin-y;@;"default_origin_y;i}[o;;"origin-z;@;"origin_zo:Sass::Script::Bool;@;F;i~[o;;"only3d;@;"only3do;
;"if;@;i;{ ; [o;	;"origin-z;@;"origin_z;io;);@;T;io;);@;F;io;;i ;@;[ ;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;i;0o;;"transform;@;[u;$6[o:Sass::Script::Variable	:
@name"only3d:@options{ :@underscored_name"only3d:
@lineiu:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@name"experimental:@options{ :@children[ :
@linei:@keywords{ :
@args[o:Sass::Script::String	;@	:@value"transform;	i:
@type:identifiero:Sass::Script::Variable	;"transform;@	:@underscored_name"transform;	io;	;@	;"	-moz;	i;;o;	;@	;"-webkit;	i;;o;	;@	;"-o;	i;;o;	;@	;"-ms;	i;;o:!Sass::Script::UnaryOperation	;@	;	i:@operator:not:@operando;	;@	;"-khtml;	i;;o;	;@	;"official;	i;;[o:Sass::Tree::MixinNode;"experimental;@:@children[ ;	i:@keywords{ :
@args[o:Sass::Script::String	;@:@value"transform;	i:
@type:identifiero; 	;"transform;@;"transform;	io:!Sass::Script::UnaryOperation	;@;	i:@operator:not:@operando;	;@;"	-moz;	i;;o;	;@;"-webkit;	i;;o;	;@;	i;;;o;	;@;"-o;	i;;o;	;@;	i;;;o;	;@;"-ms;	i;;o;	;@;	i;;;o;	;@;"-khtml;	i;;o;	;@;"official;	i;;;i;%T; [[o;;"transform;@;"transform0[o;;"only3d;@;"only3do;);@;F;io;;i ;@;[ ;["D/* Shortcut to target all browsers with 2D transform support */;i;0o;;"transform2d;@;[o:Sass::Tree::MixinNode;"transform;@;[ ;i¡;{ ; [o;	;"
trans;@;"
trans;i¡o;);@;F;i¡;i ;%T; [[o;;"
trans;@;"
trans0o;;i ;@;[ ;["E/* Shortcut to target only browsers with 3D transform support */;i¤;0o;;"transform3d;@;[o;*;"transform;@;[ ;i¦;{ ; [o;	;"
trans;@;"
trans;i¦o;);@;T;i¦;i¥;%T; [[o;;"
trans;@;"
trans0o;;i ;@;[ ;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;i©;0o;;i ;@;[ ;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;i­;0o;;"perspective;@;[o;*;"experimental;@;[ ;i·;{ ; [o;&	;@;"perspective;iµ;':identifiero;	;"p;@;"p;iµo:!Sass::Script::UnaryOperation	;@;i¶;!:not:@operando;&	;@;"	-moz;i¶;';+o;&	;@;"-webkit;i¶;';+o;,	;@;i¶;!;-;.o;&	;@;"-o;i¶;';+o;,	;@;i¶;!;-;.o;&	;@;"-ms;i¶;';+o;,	;@;i¶;!;-;.o;&	;@;"-khtml;i¶;';+o;&	;@;"official;i¶;';+;i´;%T; [[o;;"p;@;"p0o;;i ;@;[ ;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;iº;0o;;"perspective-origin;@;[o;*;"experimental;@;[ ;iÂ;{ ; [o;&	;@;"perspective-origin;iÀ;';+o;	;"origin;@;"origin;iÀo;,	;@;iÁ;!;-;.o;&	;@;"	-moz;iÁ;';+o;&	;@;"-webkit;iÁ;';+o;,	;@;iÁ;!;-;.o;&	;@;"-o;iÁ;';+o;,	;@;iÁ;!;-;.o;&	;@;"-ms;iÁ;';+o;,	;@;iÁ;!;-;.o;&	;@;"-khtml;iÁ;';+o;&	;@;"official;iÁ;';+;i¿;%T; [[o;;"origin;@;"origino;;[ ;@;["%;i7;i¿;"50%o;;i ;@;[ ;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;iÅ;0o;;"transform-style;@;[o;*;"experimental;@;[ ;iÎ;{ ; [o;&	;@;"transform-style;iÌ;';+o;	;"
style;@;"
style;iÌo;,	;@;iÍ;!;-;.o;&	;@;"	-moz;iÍ;';+o;&	;@;"-webkit;iÍ;';+o;,	;@;iÍ;!;-;.o;&	;@;"-o;iÍ;';+o;,	;@;iÍ;!;-;.o;&	;@;"-ms;iÍ;';+o;,	;@;iÍ;!;-;.o;&	;@;"-khtml;iÍ;';+o;&	;@;"official;iÍ;';+;iË;%T; [[o;;"
style;@;"
styleo;&	;@;"preserve-3d;iË;';+o;;i ;@;[ ;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;iÑ;0o;;"backface-visibility;@;[o;*;"experimental;@;[ ;iÚ;{ ; [o;&	;@;"backface-visibility;iØ;';+o;	;"visibility;@;"visibility;iØo;,	;@;iÙ;!;-;.o;&	;@;"	-moz;iÙ;';+o;&	;@;"-webkit;iÙ;';+o;,	;@;iÙ;!;-;.o;&	;@;"-o;iÙ;';+o;,	;@;iÙ;!;-;.o;&	;@;"-ms;iÙ;';+o;,	;@;iÙ;!;-;.o;&	;@;"-khtml;iÙ;';+o;&	;@;"official;iÙ;';+;i×;%T; [[o;;"visibility;@;"visibilityo;&	;@;"hidden;i×;';+o;;i ;@;[ ;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;iÝ;0o;;i ;@;[ ;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;iä;0o;;i ;@;[ ;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iç;0o;;"
scale;@;[o;;0;"
trans;@;[ ;o;
;"
scale;@;iö;{ ; [o;	;"scale-x;@;"scale_x;iöo;	;"scale-y;@;"scale_y;iö;iöu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei÷0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i÷:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	i÷o; 	;"
trans;@;"
trans;	i÷;	i÷;	i÷o;*;"transform;@;[ ;iø;{ ; [o;	;"
trans;@;"
trans;iøo;	;"only3d;@;"only3d;iø;iõ;%T; [	[o;;"scale-x;@;"scale_xo;	;"default-scale-x;@;"default_scale_x;iñ[o;;"scale-y;@;"scale_yo;	;"scale-x;@;"scale_x;iò[o;;"perspective;@;"perspectiveo;);@;F;ió[o;;"only3d;@;"only3do;);@;F;iôo;;i ;@;[ ;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iû;0o;;"scaleX;@;[o;;0;"
trans;@;[ ;o;
;"scaleX;@;i;{ ; [o;	;"
scale;@;"
scale;i;iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	io; 	;"
trans;@;"
trans;	i;	i;	io;*;"transform;@;[ ;i;{ ; [o;	;"
trans;@;"
trans;io;	;"only3d;@;"only3d;i;i;%T; [[o;;"
scale;@;"
scaleo;	;"default-scale-x;@;"default_scale_x;i [o;;"perspective;@;"perspectiveo;);@;F;i[o;;"only3d;@;"only3do;);@;F;io;;i ;@;[ ;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i	;0o;;"scaleY;@;[o;;0;"
trans;@;[ ;o;
;"scaleY;@;i;{ ; [o;	;"
scale;@;"
scale;i;iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	io; 	;"
trans;@;"
trans;	i;	i;	io;*;"transform;@;[ ;i;{ ; [o;	;"
trans;@;"
trans;io;	;"only3d;@;"only3d;i;i;%T; [[o;;"
scale;@;"
scaleo;	;"default-scale-y;@;"default_scale_y;i[o;;"perspective;@;"perspectiveo;);@;F;i[o;;"only3d;@;"only3do;);@;F;io;;i ;@;[ ;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0o;;"scaleZ;@;[o;;0;"
trans;@;[ ;o;
;"scaleZ;@;i;{ ; [o;	;"
scale;@;"
scale;i;iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei 0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i :@keywords{ :
@args[o; 	;"perspective;@;"perspective;	i o; 	;"
trans;@;"
trans;	i ;	i ;	i o;*;"transform3d;@;[ ;i!;{ ; [o;	;"
trans;@;"
trans;i!;i;%T; [[o;;"
scale;@;"
scaleo;	;"default-scale-z;@;"default_scale_z;i[o;;"perspective;@;"perspectiveo;);@;F;io;;i ;@;[ ;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i$;0o;;"scale3d;@;[o;;0;"
trans;@;[ ;o;
;"scale3d;@;i.;{ ; [o;	;"scale-x;@;"scale_x;i.o;	;"scale-y;@;"scale_y;i.o;	;"scale-z;@;"scale_z;i.;i.u;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei/0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i/:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	i/o; 	;"
trans;@;"
trans;	i/;	i/;	i/o;*;"transform3d;@;[ ;i0;{ ; [o;	;"
trans;@;"
trans;i0;i-;%T; [	[o;;"scale-x;@;"scale_xo;	;"default-scale-x;@;"default_scale_x;i)[o;;"scale-y;@;"scale_yo;	;"default-scale-y;@;"default_scale_y;i*[o;;"scale-z;@;"scale_zo;	;"default-scale-z;@;"default_scale_z;i+[o;;"perspective;@;"perspectiveo;);@;F;i,o;;i ;@;[ ;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;i3;0o;;i ;@;[ ;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i7;0o;;"rotate;@;[o;;0;"
trans;@;[ ;o;
;"rotate;@;iA;{ ; [o;	;"rotate;@;"rotate;iA;iAu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiB0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	iB:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	iBo; 	;"
trans;@;"
trans;	iB;	iB;	iBo;*;"transform;@;[ ;iC;{ ; [o;	;"
trans;@;"
trans;iCo;	;"only3d;@;"only3d;iC;i@;%T; [[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;i=[o;;"perspective;@;"perspectiveo;);@;F;i>[o;;"only3d;@;"only3do;);@;F;i?o;;i ;@;[ ;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iF;0o;;"rotateZ;@;[o;*;"rotate;@;[ ;iN;{ ; [o;	;"rotate;@;"rotate;iNo;	;"perspective;@;"perspective;iNo;	;"only3d;@;"only3d;iN;iM;%T; [[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;iJ[o;;"perspective;@;"perspectiveo;);@;F;iK[o;;"only3d;@;"only3do;);@;F;iLo;;i ;@;[ ;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iQ;0o;;"rotateX;@;[o;;0;"
trans;@;[ ;o;
;"rotateX;@;iY;{ ; [o;	;"rotate;@;"rotate;iY;iYu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiZ0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	iZ:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	iZo; 	;"
trans;@;"
trans;	iZ;	iZ;	iZo;*;"transform3d;@;[ ;i[;{ ; [o;	;"
trans;@;"
trans;i[;iX;%T; [[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;iV[o;;"perspective;@;"perspectiveo;);@;F;iWo;;i ;@;[ ;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i^;0o;;"rotateY;@;[o;;0;"
trans;@;[ ;o;
;"rotateY;@;if;{ ; [o;	;"rotate;@;"rotate;if;ifu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineig0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	ig:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	igo; 	;"
trans;@;"
trans;	ig;	ig;	igo;*;"transform3d;@;[ ;ih;{ ; [o;	;"
trans;@;"
trans;ih;ie;%T; [[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;ic[o;;"perspective;@;"perspectiveo;);@;F;ido;;i ;@;[ ;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ik;0o;;"rotate3d;@;[o;;0;"
trans;@;[ ;o;
;"rotate3d;@;iy;{ ; [	o;	;"vector-x;@;"vector_x;iyo;	;"vector-y;@;"vector_y;iyo;	;"vector-z;@;"vector_z;iyo;	;"rotate;@;"rotate;iy;iyu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiz0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	iz:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	izo; 	;"
trans;@;"
trans;	iz;	iz;	izo;*;"transform3d;@;[ ;i{;{ ; [o;	;"
trans;@;"
trans;i{;ix;%T; [
[o;;"vector-x;@;"vector_xo;	;"default-vector-x;@;"default_vector_x;is[o;;"vector-y;@;"vector_yo;	;"default-vector-y;@;"default_vector_y;it[o;;"vector-z;@;"vector_zo;	;"default-vector-z;@;"default_vector_z;iu[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;iv[o;;"perspective;@;"perspectiveo;);@;F;iwo;;i ;@;[ ;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;i~;0o;;i ;@;[ ;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0o;;"translate;@;[o;;0;"
trans;@;[ ;o;
;"translate;@;i;{ ; [o;	;"translate-x;@;"translate_x;io;	;"translate-y;@;"translate_y;i;iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	io; 	;"
trans;@;"
trans;	i;	i;	io;*;"transform;@;[ ;i;{ ; [o;	;"
trans;@;"
trans;io;	;"only3d;@;"only3d;i;i;%T; [	[o;;"translate-x;@;"translate_xo;	;"default-translate-x;@;"default_translate_x;i[o;;"translate-y;@;"translate_yo;	;"default-translate-y;@;"default_translate_y;i[o;;"perspective;@;"perspectiveo;);@;F;i[o;;"only3d;@;"only3do;);@;F;io;;i ;@;[ ;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0o;;"translateX;@;[o;;0;"
trans;@;[ ;o;
;"translateX;@;i;{ ; [o;	;"trans-x;@;"trans_x;i;iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	io; 	;"
trans;@;"
trans;	i;	i;	io;*;"transform;@;[ ;i;{ ; [o;	;"
trans;@;"
trans;io;	;"only3d;@;"only3d;i;i;%T; [[o;;"trans-x;@;"trans_xo;	;"default-translate-x;@;"default_translate_x;i[o;;"perspective;@;"perspectiveo;);@;F;i[o;;"only3d;@;"only3do;);@;F;io;;i ;@;[ ;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;0o;;"translateY;@;[o;;0;"
trans;@;[ ;o;
;"translateY;@;i©;{ ; [o;	;"trans-y;@;"trans_y;i©;i©u;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiª0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	iª:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	iªo; 	;"
trans;@;"
trans;	iª;	iª;	iªo;*;"transform;@;[ ;i«;{ ; [o;	;"
trans;@;"
trans;i«o;	;"only3d;@;"only3d;i«;i¨;%T; [[o;;"trans-y;@;"trans_yo;	;"default-translate-y;@;"default_translate_y;i¥[o;;"perspective;@;"perspectiveo;);@;F;i¦[o;;"only3d;@;"only3do;);@;F;i§o;;i ;@;[ ;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i®;0o;;"translateZ;@;[o;;0;"
trans;@;[ ;o;
;"translateZ;@;i¶;{ ; [o;	;"trans-z;@;"trans_z;i¶;i¶u;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei·0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	i·:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	i·o; 	;"
trans;@;"
trans;	i·;	i·;	i·o;*;"transform3d;@;[ ;i¸;{ ; [o;	;"
trans;@;"
trans;i¸;iµ;%T; [[o;;"trans-z;@;"trans_zo;	;"default-translate-z;@;"default_translate_z;i³[o;;"perspective;@;"perspectiveo;);@;F;i´o;;i ;@;[ ;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i»;0o;;"translate3d;@;[o;;0;"
trans;@;[ ;o;
;"translate3d;@;iÅ;{ ; [o;	;"translate-x;@;"translate_x;iÅo;	;"translate-y;@;"translate_y;iÅo;	;"translate-z;@;"translate_z;iÅ;iÅu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiÆ0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
;"perspective;@;	iÆ:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	iÆo; 	;"
trans;@;"
trans;	iÆ;	iÆ;	iÆo;*;"transform3d;@;[ ;iÇ;{ ; [o;	;"
trans;@;"
trans;iÇ;iÄ;%T; [	[o;;"translate-x;@;"translate_xo;	;"default-translate-x;@;"default_translate_x;iÀ[o;;"translate-y;@;"translate_yo;	;"default-translate-y;@;"default_translate_y;iÁ[o;;"translate-z;@;"translate_zo;	;"default-translate-z;@;"default_translate_z;iÂ[o;;"perspective;@;"perspectiveo;);@;F;iÃo;;i ;@;[ ;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;iÊ;0o;;i ;@;[ ;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÎ;0o;;"	skew;@;[o;;0;"
trans;@;[ ;o;
;"	skew;@;iÚ;{ ; [o;	;"skew-x;@;"skew_x;iÚo;	;"skew-y;@;"skew_y;iÚ;iÚo;*;"transform;@;[ ;iÛ;{ ; [o;	;"
trans;@;"
trans;iÛo;	;"only3d;@;"only3d;iÛ;iÙ;%T; [[o;;"skew-x;@;"skew_xo;	;"default-skew-x;@;"default_skew_x;iÖ[o;;"skew-y;@;"skew_yo;	;"default-skew-y;@;"default_skew_y;i×[o;;"only3d;@;"only3do;);@;F;iØo;;i ;@;[ ;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÞ;0o;;"
skewX;@;[o;;0;"
trans;@;[ ;o;
;"
skewX;@;iç;{ ; [o;	;"skew-x;@;"skew_x;iç;iço;*;"transform;@;[ ;iè;{ ; [o;	;"
trans;@;"
trans;ièo;	;"only3d;@;"only3d;iè;iæ;%T; [[o;;"skew-x;@;"skew_xo;	;"default-skew-x;@;"default_skew_x;iä[o;;"only3d;@;"only3do;);@;F;iåo;;i ;@;[ ;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ië;0o;;"
skewY;@;[o;;0;"
trans;@;[ ;o;
;"
skewY;@;iô;{ ; [o;	;"skew-y;@;"skew_y;iô;iôo;*;"transform;@;[ ;iõ;{ ; [o;	;"
trans;@;"
trans;iõo;	;"only3d;@;"only3d;iõ;ió;%T; [[o;;"skew-y;@;"skew_yo;	;"default-skew-y;@;"default_skew_y;iñ[o;;"only3d;@;"only3do;);@;F;iòo;;i ;@;[ ;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iù;0o;;"create-transform;@;[o;;0;"
trans;@;[ ;o;
;"unquote;@;i;{ ; [o;&	;@;" ;i;';(;io;;i ;@;[ ;["/* perspective */;i;0u;$.[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::Funcall
;"perspective;@;	i:@keywords{ :
@args[o; 	;"perspective;@;"perspective;	i;	io;;i ;@;[ ;["/* scale */;i;0u;$Ê[o:Sass::Script::Operation
:@options{ :@operand2o:Sass::Script::Variable	:
@name"scale-y;@:@underscored_name"scale_y:
@linei;i:@operand1o;	;	"scale-x;@;
"scale_x;i:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@name"scale-x:@options{ :@underscored_name"scale_x:
@linei0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	io:Sass::Script::Funcall
;"scaleX;@;	i:@keywords{ :
@args[o; 	;"scale-x;@;"scale_x;	i;	i;	iu; v[o:Sass::Script::Variable	:
@name"scale-y:@options{ :@underscored_name"scale_y:
@linei 0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i o:Sass::Script::Funcall
;"scaleY;@;	i :@keywords{ :
@args[o; 	;"scale-y;@;"scale_y;	i ;	i ;	i u; v[o:Sass::Script::Variable	:
@name"scale-z:@options{ :@underscored_name"scale_z:
@linei!0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i!o:Sass::Script::Funcall
;"scaleZ;@;	i!:@keywords{ :
@args[o; 	;"scale-z;@;"scale_z;	i!;	i!;	i![u;L[o:Sass::Script::Variable	:
@name"scale-z:@options{ :@underscored_name"scale_z:
@lineiu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:@guarded0:
@name"
trans:@options{ :@children[ :
@expro:Sass::Script::List	;@	:@separator:
space:@value[o:Sass::Script::Variable	;"
trans;@	:@underscored_name"
trans:
@lineio:Sass::Script::Funcall
;"
scale;@	;i:@keywords{ :
@args[o;	;"scale-x;@	;"scale_x;io;	;"scale-y;@	;"scale_y;i;i;i[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	io:Sass::Script::Funcall
;"scale3d;@;	i:@keywords{ :
@args[o; 	;"scale-x;@;"scale_x;	io; 	;"scale-y;@;"scale_y;	io; 	;"scale-z;@;"scale_z;	i;	i;	io;;i ;@;[ ;["/* rotate */;i$;0u;${[o:Sass::Script::Variable	:
@name"rotate-x:@options{ :@underscored_name"rotate_x:
@linei%0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i%o:Sass::Script::Funcall
;"rotateX;@;	i%:@keywords{ :
@args[o; 	;"rotate-x;@;"rotate_x;	i%;	i%;	i%u;${[o:Sass::Script::Variable	:
@name"rotate-y:@options{ :@underscored_name"rotate_y:
@linei&0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i&o:Sass::Script::Funcall
;"rotateY;@;	i&:@keywords{ :
@args[o; 	;"rotate-y;@;"rotate_y;	i&;	i&;	i&u;${[o:Sass::Script::Variable	:
@name"rotate-z:@options{ :@underscored_name"rotate_z:
@linei'0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i'o:Sass::Script::Funcall
;"rotateZ;@;	i':@keywords{ :
@args[o; 	;"rotate-z;@;"rotate_z;	i';	i';	i'u;$|[o:Sass::Script::Variable	:
@name"rotate3d:@options{ :@underscored_name"rotate3d:
@linei(0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i(o:Sass::Script::Funcall
;"rotate3d;@;	i(:@keywords{ :
@args[o; 	;"rotate3d;@;"rotate3d;	i(;	i(;	i(o;;i ;@;[ ;["/* translate */;i*;0u;$Þ[o:Sass::Script::Operation
:@options{ :@operand2o:Sass::Script::Variable	:
@name"trans-y;@:@underscored_name"trans_y:
@linei+;i+:@operand1o;	;	"trans-x;@;
"trans_x;i+:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@name"trans-x:@options{ :@underscored_name"trans_x:
@linei/0[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i/o:Sass::Script::Funcall
;"translateX;@;	i/:@keywords{ :
@args[o; 	;"trans-x;@;"trans_x;	i/;	i/;	i/u; z[o:Sass::Script::Variable	:
@name"trans-y:@options{ :@underscored_name"trans_y:
@linei00[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i0o:Sass::Script::Funcall
;"translateY;@;	i0:@keywords{ :
@args[o; 	;"trans-y;@;"trans_y;	i0;	i0;	i0u; z[o:Sass::Script::Variable	:
@name"trans-z:@options{ :@underscored_name"trans_z:
@linei10[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i1o:Sass::Script::Funcall
;"translateZ;@;	i1:@keywords{ :
@args[o; 	;"trans-z;@;"trans_z;	i1;	i1;	i1[u;T[o:Sass::Script::Variable	:
@name"trans-z:@options{ :@underscored_name"trans_z:
@linei,u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:@guarded0:
@name"
trans:@options{ :@children[ :
@expro:Sass::Script::List	;@	:@separator:
space:@value[o:Sass::Script::Variable	;"
trans;@	:@underscored_name"
trans:
@linei-o:Sass::Script::Funcall
;"translate;@	;i-:@keywords{ :
@args[o;	;"trans-x;@	;"trans_x;i-o;	;"trans-y;@	;"trans_y;i-;i-;i-[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i,o:Sass::Script::Funcall
;"translate3d;@;	i,:@keywords{ :
@args[o; 	;"trans-x;@;"trans_x;	i,o; 	;"trans-y;@;"trans_y;	i,o; 	;"trans-z;@;"trans_z;	i,;	i,;	i,o;;i ;@;[ ;["/* skew */;i4;0u;$[o:Sass::Script::Operation
:@options{ :@operand2o:Sass::Script::Variable	:
@name"skew-y;@:@underscored_name"skew_y:
@linei5;i5:@operand1o;	;	"skew-x;@;
"skew_x;i5:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@name"skew-x:@options{ :@underscored_name"skew_x:
@linei70[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i7o:Sass::Script::Funcall
;"
skewX;@;	i7:@keywords{ :
@args[o; 	;"skew-x;@;"skew_x;	i7;	i7;	i7u; q[o:Sass::Script::Variable	:
@name"skew-y:@options{ :@underscored_name"skew_y:
@linei80[o:Sass::Tree::VariableNode:@guarded0;"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i8o:Sass::Script::Funcall
;"
skewY;@;	i8:@keywords{ :
@args[o; 	;"skew-y;@;"skew_y;	i8;	i8;	i8[o:Sass::Tree::VariableNode:@guarded0;	"
trans;@:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o;	;	"
trans;@;
"
trans;i5o:Sass::Script::Funcall
;	"	skew;@;i5:@keywords{ :
@args[o;	;	"skew-x;@;
"skew_x;i5o;	;	"skew-y;@;
"skew_y;i5;i5;i5o;;i ;@;[ ;["/* apply it! */;i;;0o;*;"transform;@;[ ;i<;{ ; [o;	;"
trans;@;"
trans;i<o;	;"only3d;@;"only3d;i<o;*;"transform-origin;@;[ ;i=;{ ; [	o;	;"origin-x;@;"origin_x;i=o;	;"origin-y;@;"origin_y;i=o;	;"origin-z;@;"origin_z;i=o;	;"only3d;@;"only3d;i=;i;%T; [[o;;"perspective;@;"perspectiveo;);@;F;i[o;;"scale-x;@;"scale_xo;);@;F;i[o;;"scale-y;@;"scale_yo;);@;F;i[o;;"scale-z;@;"scale_zo;);@;F;i[o;;"rotate-x;@;"rotate_xo;);@;F;i[o;;"rotate-y;@;"rotate_yo;);@;F;i[o;;"rotate-z;@;"rotate_zo;);@;F;i	[o;;"rotate3d;@;"rotate3do;);@;F;i
[o;;"trans-x;@;"trans_xo;);@;F;i[o;;"trans-y;@;"trans_yo;);@;F;i[o;;"trans-z;@;"trans_zo;);@;F;i[o;;"skew-x;@;"skew_xo;);@;F;i[o;;"skew-y;@;"skew_yo;);@;F;i[o;;"origin-x;@;"origin_xo;);@;F;i[o;;"origin-y;@;"origin_yo;);@;F;i[o;;"origin-z;@;"origin_zo;);@;F;i[o;;"only3d;@;"only3do;);@;F;io;;i ;@;[ ;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;iA;0o;;"simple-transform;@;[o;*;"create-transform;@;[ ;iU;{ ; [o;);@;F;iNo;	;"
scale;@;"
scale;iOo;	;"
scale;@;"
scale;iOo;);@;F;iOo;);@;F;iPo;);@;F;iPo;	;"rotate;@;"rotate;iPo;);@;F;iPo;	;"trans-x;@;"trans_x;iQo;	;"trans-y;@;"trans_y;iQo;);@;F;iQo;	;"skew-x;@;"skew_x;iRo;	;"skew-y;@;"skew_y;iRo;	;"origin-x;@;"origin_x;iSo;	;"origin-y;@;"origin_y;iSo;);@;F;iSo;);@;F;iT;iL;%T; [[o;;"
scale;@;"
scaleo;);@;F;iD[o;;"rotate;@;"rotateo;);@;F;iE[o;;"trans-x;@;"trans_xo;);@;F;iF[o;;"trans-y;@;"trans_yo;);@;F;iG[o;;"skew-x;@;"skew_xo;);@;F;iH[o;;"skew-y;@;"skew_yo;);@;F;iI[o;;"origin-x;@;"origin_xo;);@;F;iJ[o;;"origin-y;@;"origin_yo;);@;F;iK;i;%T
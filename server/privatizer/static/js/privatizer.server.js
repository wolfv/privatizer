// Generated by CoffeeScript 1.3.3
(function() {
  var App, Key, KeyView, KeysCollection, KeysView, Permission, PermissionView, PermissionsCollection, PermissionsView, Router, fbAccessToken, view;

  fbAccessToken = 'AAACEdEose0cBAId2g3XUVlotTlKgmd1ZCboOUq6Axsnnn1ghNZAFEPZApQknTEKjvehyf9DzOfxR5W9TxZCxvrDR0ywZB33KPdHOzisjWSAZDZD';

  $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
    var verificationToken;
    verificationToken = $("meta[name='__RequestVerificationToken']").attr('content');
    if (verificationToken) {
      return jqXHR.setRequestHeader("X-Request-Verification-Token", verificationToken);
    }
  });

  App = {};

  Key = Backbone.Model.extend({
    rootUrl: '/api/keys',
    defaults: {
      name: 0,
      description: 0,
      shared_with: []
    }
  });

  Permission = Backbone.Model.extend({
    url: function() {
      var rootUrl;
      rootUrl = '/api/keys/permission';
      return "api/keys/" + this.attributes.key_id + "/permissions";
    },
    defaults: {
      name: "",
      key_id: 0,
      user_id: 0,
      external_id: 0,
      external_type: ''
    }
  });

  PermissionsCollection = Backbone.Collection.extend({
    model: Permission
  });

  KeysCollection = Backbone.Collection.extend({
    url: '/api/keys',
    model: Key,
    initialize: function() {}
  });

  PermissionView = Backbone.View.extend({
    tagName: 'li',
    url: 'keys/permission/delete/',
    className: 'btn btn-mini btn-danger delete-permission',
    events: {
      "click": "del"
    },
    render: function() {
      this.$el.html(this.model.attributes.name + "<i class=\"icon-close\"></i>");
      return this.$el.attr('href', this.url + ("" + this.options.key_id + ":" + this.model.attributes.id));
    },
    unrender: function() {
      return this.$el.remove();
    },
    del: function(e) {
      var self;
      self = this;
      e.preventDefault();
      return $.ajax({
        url: self.$el.attr('href'),
        success: function() {
          return self.unrender();
        },
        error: function() {
          console.log(self.$el.attr('href'));
          return alert('sorry, something is wrong here.');
        }
      });
    }
  });

  PermissionsView = Backbone.View.extend({
    tagName: 'div',
    className: 'multiple-select-container',
    events: {
      "focus .multiple-select-searchbox": "searchFocus",
      "keyup .multiple-select-searchbox": "searchKeydown"
    },
    initialize: function() {
      return _.bindAll(this, 'render');
    },
    render: function() {
      var self;
      self = this;
      this.$permCont = $('<div>').addClass('key-permissions');
      this.$el.append(this.$permCont);
      this.$ul = $('<ul>').appendTo(this.$permCont);
      this.collection.each(function(p) {
        var pv;
        pv = new PermissionView({
          model: p,
          key_id: self.options.key_id
        });
        pv.render();
        return self.$ul.append(pv.el);
      });
      this.$search = $('<input>').addClass('multiple-select-searchbox').attr('type', 'text');
      this.$searchli = $('<div>').append(this.$search);
      this.$permCont.after(this.$searchli);
      return this.$el;
    },
    searchFocus: function(e) {},
    searchKeydown: function(e) {
      var permission, self;
      if (e.target.value === 'fb:') {
        $(e.target).addClass('prepended fb').before($('<span>').text('fb').addClass('prependor fb'));
        e.target.external_type = "fb";
        e.target.value = "";
      }
      if (e.target.external_type === "fb") {
        if (!(window.facebookfriends != null)) {
          $.ajax({
            url: 'https://graph.facebook.com/me/friends',
            data: {
              access_token: fbAccessToken
            },
            dataType: 'jsonp',
            success: function(data) {
              var names, obj, _i, _len, _ref;
              window.facebookfriends = data;
              names = [];
              _ref = data.data;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                obj = _ref[_i];
                names.push(obj.name);
              }
              window.facebookfriends.names = names;
              return $(e.target).typeahead({
                source: names
              });
            }
          });
        } else {
          $(e.target).typeahead({
            source: window.facebookfriends.names
          });
        }
      }
      if (e.keyCode === 8 && e.target.value === '') {
        $(e.target).parent().find('.prependor').remove();
        $(e.target).removeClass('prepended fb tw mail');
      }
      if (e.keyCode === 13) {
        permission = new Permission({
          name: e.target.value,
          key_id: this.options.key_id,
          external_id: e.target.value
        });
        if (e.target.external_type) {
          permission.set('external_type', e.target.external_type);
        }
        self = this;
        return permission.save(null, {
          success: function() {
            var pv;
            self.collection.add(permission);
            pv = new PermissionView({
              model: permission,
              key_id: self.options.key_id
            });
            pv.render();
            self.$ul.append(pv.$el);
            return e.target.value = "";
          },
          error: function(error, message) {
            alert(message.statusText);
            return permission.destroy();
          }
        });
      }
    }
  });

  KeyView = Backbone.View.extend({
    tagName: 'tr',
    className: 'keyrow',
    events: {
      "dblclick .name": "editName",
      "dblclick .description": "editDescription",
      "click .delete": "del"
    },
    initialize: function() {
      return _.bindAll(this, 'render');
    },
    render: function() {
      var pel, permissionsCollection, self, t;
      self = this;
      t = "<td class=\"key-hash\">" + this.model.attributes.hash + "<span class=\"triangle\"></span></td>			 <td class=\"key-name\"><span class=\"name\">" + this.model.attributes.name + "</span></td>			 <td class=\"key-description\"><span class=\"description\">" + this.model.attributes.description + "</span></td>";
      this.$el.html(t);
      pel = $('<td>');
      permissionsCollection = new PermissionsCollection(this.model.attributes.shared_with);
      console.log(this.model);
      this.permissionsView = new PermissionsView({
        collection: permissionsCollection,
        key_id: this.model.attributes.id
      });
      this.$el.append(pel.append(this.permissionsView.render()));
      this.$el.append(this.make('a', {
        "class": "btn btn-danger delete"
      }, "Delete Key"));
      return this;
    },
    unrender: function() {
      return this.$el.remove();
    },
    replaceWithInput: function(el, attr) {
      var input, self;
      input = $('<input>').attr('type', 'text').addClass('inline-edit').val(el.text());
      el.parent().append(input);
      input.focus();
      el.css('display', 'none');
      self = this;
      return input.blur(function() {
        self.model.set(attr, $(this).val());
        el.text($(this).val()).css('display', 'inline');
        $(this).remove();
        return self.model.save();
      });
    },
    editName: function(e) {
      return this.replaceWithInput($(e.target), 'name');
    },
    editDescription: function(e) {
      return this.replaceWithInput($(e.target), 'description');
    },
    del: function(e) {
      var c;
      e.preventDefault();
      c = confirm('Do you really want to delete the key?');
      if (c) {
        this.model.destroy();
        return this.unrender();
      }
    },
    autocompletePermissions: function(e) {
      var self;
      console.log('e.target.value');
      if (e.target.value === 'fb:') {
        this.facebook = "true";
        e.target.value = '';
      }
      if (this.facebook) {
        self = this;
        if (self.facebookfriends === void 0) {
          $.ajax({
            url: 'https://graph.facebook.com/me/friends',
            data: {
              access_token: fbAccessToken
            },
            dataType: 'jsonp',
            success: function(data) {
              var names, obj, _i, _len, _ref;
              self.facebookfriends = data;
              names = [];
              _ref = data.data;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                obj = _ref[_i];
                names.push(obj.name);
              }
              return $(e.target).typeahead({
                source: names
              });
            }
          });
        }
      }
      if (e.keyCode === 13) {
        return console.log('Enter ' + e.target.value);
      }
    }
  });

  KeysView = Backbone.View.extend({
    tagName: 'table',
    className: 'keystable',
    initialize: function() {
      _.bindAll(this, 'render');
      this.collection = new KeysCollection();
      this.collection.bind('add', this.render, this);
      return this.collection.bind('reset', this.render, this);
    },
    fetch: function() {
      return this.collection.fetch();
    },
    render: function() {
      var tbody;
      this.$el.html('	\
		<thead>\
			<th>#</th>\
			<th>Name</th>\
			<th>Beschreibung</th>\
			<th>Freigegeben f√ºr</th>\
			<th>Freigeben</th>\
		</thead>\
		<hr>\
		');
      tbody = $('<tbody>');
      this.collection.each(function(m) {
        var mv;
        mv = new KeyView({
          model: m
        });
        mv.render();
        return tbody.append(mv.el);
      });
      this.$el.append(tbody);
      return this;
    }
  });

  view = void 0;

  Router = Backbone.Router.extend({
    routes: {
      "": "index",
      "keys": "keys"
    },
    initialize: function() {
      return _.bindAll(this, 'index', 'keys');
    },
    index: function() {},
    keys: function() {
      view = new KeysView();
      view.fetch();
      view.render();
      return this.setBody(view.el);
    },
    setBody: function(el) {
      return $('#main-table').append(el);
    }
  });

  $.fn.serializeJSON = function() {
    var json;
    json = {};
    $.map($(this).serializeArray(), function(n, i) {
      return json[n['name']] = n['value'];
    });
    return json;
  };

  $(document).ready(function() {
    App.router = new Router();
    Backbone.history.start({
      pushState: true
    });
    $('#generate_keytext').click(function(e) {
      var chars, chr, i, output, randnum, _i;
      e.preventDefault();
      chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      output = '';
      for (i = _i = 1; _i <= 50; i = ++_i) {
        randnum = Math.floor(Math.random() * chars.length);
        chr = chars.charAt(randnum);
        output += chr;
      }
      return $('#keytext').val(output);
    });
    return $('#add-key-save').click(function(e) {
      var data, key;
      data = $('#addkey form').serializeJSON();
      key = new Key(data);
      key.save();
      view.collection.add(key);
      return console.log(key.toJSON());
    });
  });

}).call(this);
